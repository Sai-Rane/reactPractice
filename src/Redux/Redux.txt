Redux is a library for Javascript Applications
You can use Redux together with React or with any other view library i.e Angular or Vue is a state container ex:Registration form

----------------------------------------------------------

Core Concepts of Redux:

Keep these 3 things in mind 
Store - Holds state of your Application
Action - Describe the changes in state of Application
Reducer - Actually carries out the state transition depending on the action. Reducer is a function

Example:             Book Shop
         Shop <-------> Shopkeeper <-------> Customer
        (store)         (Reducer)            (Action)

-----------------------------------------------------------

Rule of Redux:

1. The state of your application is stored in an object tree within a single store
{
    NumberOfBooks:10
}

2. Only way to change the state is to emit an action, an object describing what happened
{
    Type:"buyCake",
    Type:"Increment Operation"
}

3. To specify how the state tree is transformed by actions, we write pure Reducer

-----------------------------------------------------------
https://www.youtube.com/watch?v=vJaXlVGF9fE

Action in Redux:

1. Actions are JS Objects that contains information.
2. Actions are the only source of information for the store, it tells us what has happened
3. Actions have a type property and it should be defined in string constraint.
4. It is compulsory to include the type property in the Object

Syntax:
const action={
    type:"buyBook"
}

------------------------------------------------------------
https://www.youtube.com/watch?v=OzVUmxuOQzo

Reducer in React

1. Reducers decides how the state of application changes depending upon the action sent to the store
2. Reducers are function that accepts state and action as parameter and returns the next state of the application

(prevState,action)=>newState

-------------------------------------------------------------

https://www.youtube.com/watch?v=htlsE7svWIs

Redux Store:

1. Entire Application contains single store.
2. It is responsible for holding application state
3. getState() method gives access to state it holds
4. dispatch(action) method allow state to be updated
5. It has subscribe (listener) method as well by which we can register listeners.This method accept function (listener) as a parameter which execute anytime when the state in redux store changes
